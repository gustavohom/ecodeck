import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ThumbsUp, ThumbsDown, RotateCcw, HelpCircle, BookOpen, Home, SkipForward, Star } from 'lucide-react';
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";

const cartas = [
  {
    titulo: "Agricultura Sustentável",
    pergunta: `Qual das seguintes práticas é considerada mais sustentável na agricultura moderna?¹ ²
    
    <img src="/api/placeholder/400/300" alt="Agricultura Sustentável" class="w-full h-auto my-4" />
    
    A agricultura sustentável visa produzir alimentos de forma ecologicamente responsável e economicamente viável, preservando os recursos naturais para as gerações futuras.`,
    opcoes: [
      { id: 1, texto: "Monocultura intensiva" },
      { id: 2, texto: "Uso excessivo de fertilizantes químicos" },
      { id: 3, texto: "Rotação de culturas" },
      { id: 4, texto: "Desmatamento para expansão agrícola" }
    ],
    respostaCorreta: 3,
    dificuldade: "normal",
    fontes: [
      "¹FAO. (2018). Sustainable Agriculture for Biodiversity.",
      "²USDA. (2020). Sustainable Agriculture Practices."
    ]
  },
  // ... (outras cartas permanecem as mesmas)
];

const TelaInicial = ({ onStartGame, onReset }) => (
  <Card className="w-full max-w-sm mx-auto mt-8">
    <CardHeader>
      <CardTitle className="text-xl font-bold mb-4">Eco Challenge: O Jogo da Sustentabilidade</CardTitle>
    </CardHeader>
    <CardContent>
      <p className="text-sm mb-4">
        Bem-vindo ao Eco Challenge! Teste seus conhecimentos sobre sustentabilidade e faça escolhas que impactam o meio ambiente.
      </p>
    </CardContent>
    <CardFooter className="flex justify-between">
      <Button onClick={onStartGame} className="flex-1 mr-2">
        Iniciar Jogo
      </Button>
      <Button onClick={onReset} variant="outline" className="flex-1 ml-2">
        Resetar
      </Button>
    </CardFooter>
  </Card>
);

const EcoChallenge = () => {
  const [cartaAtual, setCartaAtual] = useState(null);
  const [selecionado, setSelecionado] = useState(null);
  const [respondido, setRespondido] = useState(false);
  const [respostasCertas, setRespostasCertas] = useState(0);
  const [respostasErradas, setRespostasErradas] = useState(0);
  const [mensagem, setMensagem] = useState("");
  const [progresso, setProgresso] = useState(0);
  const [mostrarDica, setMostrarDica] = useState(false);
  const [pulosDisponiveis, setPulosDisponiveis] = useState(0);
  const [jogoIniciado, setJogoIniciado] = useState(false);
  const [barrasCompletadas, setBarrasCompletadas] = useState(0);
  const [barrasPerfeitasCompletadas, setBarrasPerfeitasCompletadas] = useState(0);
  const [sequenciaPerfeita, setSequenciaPerfeita] = useState(true);

  useEffect(() => {
    if (jogoIniciado) {
      selecionarCartaAleatoria();
    }
  }, [jogoIniciado]);

  const selecionarCartaAleatoria = () => {
    const indiceAleatorio = Math.floor(Math.random() * cartas.length);
    setCartaAtual(cartas[indiceAleatorio]);
    setSelecionado(null);
    setRespondido(false);
    setMensagem("");
    setMostrarDica(false);
  };

  const handleSelecao = (id) => {
    if (!respondido) {
      setSelecionado(id);
    }
  };

  const verificarResposta = () => {
    if (selecionado !== null) {
      setRespondido(true);
      if (selecionado === cartaAtual.respostaCorreta) {
        setRespostasCertas(prev => prev + 1);
        setMensagem("Correto!");
        const novoProgresso = progresso + 20;
        if (novoProgresso >= 100) {
          setProgresso(0);
          setMensagem("Correto! Bônus extra! Barra completada!");
          setPulosDisponiveis(prev => Math.min(prev + 1, 2));
          setBarrasCompletadas(prev => prev + 1);
          if (sequenciaPerfeita) {
            setBarrasPerfeitasCompletadas(prev => prev + 1);
          }
          setSequenciaPerfeita(true);
        } else {
          setProgresso(novoProgresso);
        }
      } else {
        setRespostasErradas(prev => prev + 1);
        setMensagem(`Incorreto. A resposta correta era: ${cartaAtual.opcoes.find(op => op.id === cartaAtual.respostaCorreta).texto}`);
        setProgresso(prev => Math.max(prev - 10, 0));
        setSequenciaPerfeita(false);
      }
      if (cartaAtual.dificuldade === "dificil") {
        setPulosDisponiveis(prev => Math.min(prev + 1, 2));
      }
    }
  };

  const resetarJogo = () => {
    setRespostasCertas(0);
    setRespostasErradas(0);
    setProgresso(0);
    setPulosDisponiveis(0);
    setBarrasCompletadas(0);
    setBarrasPerfeitasCompletadas(0);
    setSequenciaPerfeita(true);
    setMensagem("Jogo resetado!");
    setTimeout(() => setMensagem(""), 2000);
    selecionarCartaAleatoria();
  };

  const toggleDica = () => {
    setMostrarDica(!mostrarDica);
  };

  const pularPergunta = () => {
    if (pulosDisponiveis > 0) {
      setPulosDisponiveis(prev => prev - 1);
      selecionarCartaAleatoria();
    }
  };

  const voltarTelaInicial = () => {
    setJogoIniciado(false);
  };

  if (!jogoIniciado) {
    return <TelaInicial onStartGame={() => setJogoIniciado(true)} onReset={resetarJogo} />;
  }

  if (!cartaAtual) return null;

  return (
    <Card className="w-full max-w-sm mx-auto mt-4">
      <CardHeader>
        <div className="flex justify-between items-center mb-4">
          <CardTitle className="text-xl font-bold">{cartaAtual.titulo}</CardTitle>
          <Badge variant={cartaAtual.dificuldade === "facil" ? "secondary" : cartaAtual.dificuldade === "normal" ? "default" : "destructive"}>
            {cartaAtual.dificuldade}
          </Badge>
        </div>
        <ScrollArea className="h-56 rounded-md border p-4">
          <div dangerouslySetInnerHTML={{ __html: cartaAtual.pergunta }} className="text-sm" />
        </ScrollArea>
      </CardHeader>
      <CardContent>
        <div className="space-y-2">
          {cartaAtual.opcoes.map((opcao) => (
            <Button
              key={opcao.id}
              onClick={() => handleSelecao(opcao.id)}
              variant={selecionado === opcao.id ? "secondary" : "outline"}
              className={`w-full justify-start text-sm ${respondido && opcao.id === cartaAtual.respostaCorreta ? "bg-green-100" : ""}`}
            >
              {opcao.texto}
            </Button>
          ))}
        </div>
        {mostrarDica && (
          <Alert className="mt-4">
            <AlertDescription>
              Dica: Pense nas práticas que promovem a sustentabilidade a longo prazo.
            </AlertDescription>
          </Alert>
        )}
      </CardContent>
      <CardFooter className="flex flex-col items-center">
        <div className="flex justify-between w-full mb-4">
          <div className="flex items-center space-x-2">
            <Button onClick={resetarJogo} size="sm" variant="outline">
              <RotateCcw className="h-4 w-4" />
            </Button>
            <Button onClick={toggleDica} size="sm" variant="outline">
              <HelpCircle className="h-4 w-4" />
            </Button>
            <Button onClick={pularPergunta} size="sm" variant="outline" disabled={pulosDisponiveis === 0}>
              <SkipForward className="h-4 w-4" />
            </Button>
            <Button onClick={voltarTelaInicial} size="sm" variant="outline">
              <Home className="h-4 w-4" />
            </Button>
          </div>
        </div>
        <div className="flex justify-between w-full mb-4">
          {!respondido ? (
            <Button onClick={verificarResposta} disabled={selecionado === null} className="w-full">
              Verificar
            </Button>
          ) : (
            <Button onClick={selecionarCartaAleatoria} className="w-full">
              Próxima Carta
            </Button>
          )}
        </div>
        {mensagem && <p className="text-center font-bold text-sm mb-2">{mensagem}</p>}
        <Progress value={progresso} className={`w-full ${progresso === 100 ? 'bg-green-500' : ''}`} />
        <div className="flex justify-between w-full mt-4 text-sm">
          <div className="flex items-center space-x-1">
            <ThumbsUp className="h-4 w-4 text-green-500" />
            <span>{respostasCertas}</span>
          </div>
          <div className="flex items-center space-x-1">
            <ThumbsDown className="h-4 w-4 text-red-500" />
            <span>{respostasErradas}</span>
          </div>
          <div className="flex items-center space-x-1">
            <SkipForward className="h-4 w-4" />
            <span>{pulosDisponiveis}</span>
          </div>
          <div className="flex items-center space-x-1">
            <Star className="h-4 w-4 text-yellow-500" />
            <span>{barrasCompletadas}</span>
          </div>
          <div className="flex items-center space-x-1">
            <Star className="h-4 w-4 text-purple-500" />
            <span>{barrasPerfeitasCompletadas}</span>
          </div>
        </div>
      </CardFooter>
    </Card>
  );
};

export default EcoChallenge;
